#!/bin/bash

set -e

program_name="usb-stick"
my_dir="$(dirname "$0")"
api_url="API_URL"

sub_help(){
    echo "Usage: $program_name <subcommand> [options]"
    echo "Subcommands:"
    echo "    store     store to a cloud usb stick"
    echo "    download  download from a cloud stick"
    echo ""
    echo "For help with each subcommand run:"
    echo "$program_name <subcommand> -h|--help"
    echo ""
}

function sub_store() {
    source "$my_dir/store_args.sh"

    if [[ ! -f "${dir}" && ! -d "${dir}" ]]
    then
        printf "the file or directory specified does not exist:\n"
        printf "$dir\n"
        exit -1
    fi

    etag=$(head -c32 <(tr -dc 'A-Z-a-z-0-9' < /dev/urandom 2>/dev/null))

    set +e

    if [[ -d "${dir}" ]]
    then
        cd "$dir"
        zip_output=$(zip -P "$password" -r "/tmp/$etag.zip" *)
    else
        zip_output=$(zip -j -P "$password" "/tmp/$etag.zip" "$dir")
    fi

    if (( $? )); then
        echo "Failure while zipping the content"
        echo "$zip_output"
        exit
    fi

    api_response=$(curl -s -X PUT "$api_url$etag" -I)
    if [[ -z "$api_response" ]]; then
        printf "Error while contacting the service, exiting\n"
        exit
    fi
    s3_upload_url=$(echo "$api_response" | grep -Fi Location | sed 's/Location: //g' | sed -e 's/[[:space:]]*$//' );
    if [[ -z "$s3_upload_url" ]]; then
        printf "Error while contacting the service, malformed response\n"
        exit
    fi

    curl -s --upload-file "/tmp/$etag.zip" "$s3_upload_url";
    if (( $? )); then
        echo "Failure while uploading to usbstick"
        exit
    fi
    set -e
    printf "Use this etag to download the file: \n$etag\n"
    printf "Example: \nusbstick download -e $etag -d /tmp \n"
}

function sub_download() {
    source "$my_dir/download_args.sh"

    cd "$dir"
    curl -L "$api_url$etag" --output "./$etag.zip"
    sudo unzip -X -qq "$etag.zip" -d "$etag"
    printf "\nYour files have been downloaded in $dir/$etag \n"
}

subcommand=$1
case $subcommand in
    "" | "-h" | "--help")
        sub_help
        ;;
    *)
        shift
        sub_${subcommand} "$@"
        if [ $? = 127 ]; then
            echo "Error: '$subcommand' is not a known subcommand." >&2
            echo "       Run '$program_name --help' for a list of known subcommands." >&2
            exit 1
        fi
        ;;
esac

exit
